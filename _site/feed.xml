<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bilif Blog</title>
    <description>Every failure is leading towards success.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 18 May 2019 08:34:57 +0800</pubDate>
    <lastBuildDate>Sat, 18 May 2019 08:34:57 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>React实现炫酷的可拖拽网格布局</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;最近老板让做一个自定义面板，能够在面板上自由的拖拽，新增，删除组件。组件可以是各种echarts图形，通过各个组件的拖拽组合，从而让用户自定义想要看到的面板。需求就是这样，那么撸起袖子开始干！😂&lt;/p&gt;

&lt;h1 id=&quot;项目预览&quot;&gt;项目预览&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://bilif.github.io/react-drag-grid/&quot;&gt;demo地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/5/14/16ab4e3123933a26?w=599&amp;amp;h=321&amp;amp;f=gif&amp;amp;s=310674&quot; alt=&quot;QQ20190514-131658-HD-compress.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;组件可以动态添加，删除，可以自由拖拽，缩放。并且缩放后组件内部的echarts图表也会跟着缩放。&lt;/p&gt;

&lt;h1 id=&quot;项目实战&quot;&gt;项目实战&lt;/h1&gt;

&lt;h5 id=&quot;技术架构&quot;&gt;技术架构&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;前端框架：&lt;a href=&quot;https://react.docschina.org/&quot;&gt;React&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;UI库：&lt;a href=&quot;https://ant.design/index-cn&quot;&gt;Ant Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;脚手架：&lt;a href=&quot;https://github.com/facebook/create-react-app&quot;&gt;create-react-app&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;拖拽插件：&lt;a href=&quot;https://github.com/STRML/react-grid-layout&quot;&gt;react-grid-layout&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;技术实现&quot;&gt;技术实现&lt;/h5&gt;
&lt;p&gt;1.使用npm安装react-grid-layout包&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;layout&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.在js文件中引入WidthProvider和Responsive组件，并且实例化响应式拖拽组件。在css文件中引入插件的样式。&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WidthProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Responsive&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-grid-layout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ResponsiveReactGridLayout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WidthProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Responsive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~react-grid-layout/css/styles.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~react-resizable/css/styles.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.在React的render方法中渲染可拖拽布局。ResponsiveReactGridLayout组件有多个属性，这里举几个比较重要的说明一下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;cols：定义了响应式布局划分成几列。&lt;/li&gt;
  &lt;li&gt;rowHeight：响应式布局中组件的行高。&lt;/li&gt;
  &lt;li&gt;onLayoutChange：当响应式布局中的组件发生拖拽或者放大缩小时触发该函数。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;ResponsiveReactGridLayout
    className=&quot;layout&quot;
    {...this.props}
    layouts={this.state.layouts}
    onLayoutChange={(layout, layouts) =&amp;gt;
              this.onLayoutChange(layout, layouts)
            }
   &amp;gt;
     {this.generateDOM()}
&amp;lt;/ResponsiveReactGridLayout&amp;gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;4.通过generateDOM函数生成布局中的组件,首先先遍历组件数组，通过每个组件的类型判断生产柱状图组件，折线组件，还是饼图组件。每个组件必须定义一个全局唯一的key值。data-grid为每一个组件绑定了其属性。下面会介绍具体的data-grid属性。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; generateDOM = () =&amp;gt; {
    return _.map(this.state.widgets, (l, i) =&amp;gt; {
      let option;
      if (l.type === 'bar') {
        option = getBarChart();
      }else if (l.type === 'line') {
        option = getLineChart();
      }else if (l.type === 'pie') {
        option = getPieChart();
      }
      let component = (
        &amp;lt;ReactEcharts
          option={option}
          notMerge={true}
          lazyUpdate={true}
          style=
        /&amp;gt;
      )
      return (
        &amp;lt;div key={l.i} data-grid={l}&amp;gt;
          &amp;lt;span className='remove' onClick={this.onRemoveItem.bind(this, i)}&amp;gt;x&amp;lt;/span&amp;gt;
          {component}
        &amp;lt;/div&amp;gt;
      );
    });
  };
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5.通过addItem函数来新增组件。每个组件属性如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;- x: 组件在x轴坐标
- y: 组件在y轴坐标
- w: 组件宽度
- h: 组件高度
- i:  组件key值
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;addItem(type,widgetId) {
    const addItem = {
      x: (this.state.widgets.length * 2) % (this.state.cols || 12),
      y: Infinity, // puts it at the bottom
      w: 2,
      h: 2,
      i: widgetId || new Date().getTime().toString(),
    };
    this.setState(
      {
        widgets: this.state.widgets.concat({
          ...addItem,
          type,
        }),
      },
    );
  };
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;6.通过onRemoveItem函数来移除增组件。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;onRemoveItem(i) {
    console.log(this.state.widgets)
    this.setState({
      widgets: this.state.widgets.filter((item,index) =&amp;gt; index !=i)
    });

  }
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;后记&quot;&gt;后记&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;感谢支持。若不足之处，欢迎大家指出，共勉。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果觉得不错，记得 点赞，谢谢大家&lt;/strong&gt; 😂&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Bilif/react-drag-grid&quot;&gt;源码地址&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;欢迎关注 我的：&lt;a href=&quot;https://bilif.github.io/&quot;&gt;【Blog】&lt;/a&gt;&lt;a href=&quot;https://github.com/Bilif&quot;&gt;【Github】&lt;/a&gt;&lt;a href=&quot;https://juejin.im/user/58b5198cac502e00589a6388&quot;&gt;【掘金】&lt;/a&gt;&lt;a href=&quot;https://www.jianshu.com/u/94a557704b3e&quot;&gt;【简书】&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Tue, 14 May 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/05/14/React%E5%AE%9E%E7%8E%B0%E7%82%AB%E9%85%B7%E7%9A%84%E5%8F%AF%E6%8B%96%E6%8B%BD%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/14/React%E5%AE%9E%E7%8E%B0%E7%82%AB%E9%85%B7%E7%9A%84%E5%8F%AF%E6%8B%96%E6%8B%BD%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</guid>
        
        <category>React</category>
        
        <category>组件拖拽</category>
        
        
      </item>
    
      <item>
        <title>ESLint语法检测工具</title>
        <description>&lt;h1 id=&quot;eslint简介&quot;&gt;ESLint简介&lt;/h1&gt;
&lt;p&gt;ESLint是一款代码规格检查工具，能够有效的保证团队的代码质量,避免低级代码。&lt;/p&gt;

&lt;h1 id=&quot;eslint特点&quot;&gt;ESlint特点&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;默认规则包含所有JSHint、JSLint中存在的所有规则，易迁移；&lt;/li&gt;
  &lt;li&gt;可以设置警告（1），错误（2），关闭（0）三种规格的配置；&lt;/li&gt;
  &lt;li&gt;包含代码风格检测；&lt;/li&gt;
  &lt;li&gt;支持插件扩展、自定义规则；&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;sublime中如何安装eslint&quot;&gt;sublime中如何安装ESLint&lt;/h1&gt;
&lt;h6 id=&quot;1环境准备&quot;&gt;1.环境准备&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;首先你得有sublime text3编辑器，并且已经安装了package control；&lt;/li&gt;
  &lt;li&gt;其次你得有node环境，如果不知道node环境如何安装，请点击前往 &lt;a href=&quot;http://blog.csdn.net/zhyh1986/article/details/39249655&quot;&gt;node&lt;/a&gt;；&lt;/li&gt;
  &lt;li&gt;好了，以上环境准备好了就可以按照下面步骤一步步来了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;2安装eslint包模块&quot;&gt;2.安装eslint包模块&lt;/h6&gt;
&lt;p&gt;可以使用npm或cnpm（淘宝）来全局安装eslint。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;npm install eslint -g
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h6 id=&quot;3安装sublimelinter插件&quot;&gt;3.安装sublimeLinter插件&lt;/h6&gt;
&lt;p&gt;在sublime中打开package control（快捷键ctrl + shift + p）选择install package 然后在搜索框中搜索sublimeLinter插件，点击即可安装。
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4190280-8f7e583f8a9c2182.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;4安装sublimelinter-contrib-eslint插件&quot;&gt;4.安装sublimeLinter-contrib-eslint插件&lt;/h6&gt;
&lt;p&gt;同样的在package control中搜索sublimeLinter-contrib-eslint插件来进行安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4190280-8cdff41f8c548a83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;5集成sublimelinter的配置文件&quot;&gt;5.集成sublimeLinter的配置文件&lt;/h6&gt;
&lt;p&gt;点击preferences ==&amp;gt; package settings ==&amp;gt; SublimeLinter ==&amp;gt; Settings-user 打开配置文件，查询paths关键字，找到paths下面的&lt;em&gt;windows&lt;/em&gt;字段，修改eslint的全局命令：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&quot;paths&quot;: {
            &quot;linux&quot;: [],
            &quot;osx&quot;: [],
            &quot;windows&quot;: [
                &quot;**/nodejs/eslint.cmd&quot;
            ]
        },
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h6 id=&quot;6创建eslintrc语法规则文件&quot;&gt;6.创建.eslintrc语法规则文件&lt;/h6&gt;
&lt;p&gt;当当当，终于到了最后一步拉。在自己的项目工程根目录下面创建.eslintrc语法规则配置文件。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;方法一: 在命令行里输入&lt;code class=&quot;highlighter-rouge&quot;&gt;eslint --init&lt;/code&gt;命令进行自主选择创建文件。命令行会根据用户自己选择的风格来创建文件
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4190280-5bdb8bb2b64b83b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;方法二: 在命令行里输入’echo {} &amp;gt; .eslintrc’命令直接创建.eslintrc文件。然后在.eslintrc文件中可以直接复制以下代码,具体的rule配置可以根据自己的项目选择性的修改：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;{
&quot;globals&quot;: {
  &quot;$&quot;: true,                                //zepto
  &quot;define&quot;: true,                           //requirejs
  &quot;require&quot;: true                           //requirejs
},
&quot;env&quot;: {
  &quot;browser&quot;: true                           //执行环境 浏览器
},
&quot;rules&quot;: {
  //官方文档 http://eslint.org/docs/rules/
  //警告
  // &quot;quotes&quot;: [0, &quot;single&quot;],                  //建议使用单引号
  // &quot;no-inner-declarations&quot;: [0, &quot;both&quot;],     //不建议在{}代码块内部声明变量或函数
  &quot;no-extra-boolean-cast&quot;: 1,               //多余的感叹号转布尔型
  &quot;no-extra-semi&quot;: 1,                       //多余的分号
  &quot;no-extra-parens&quot;: 1,                     //多余的括号
  &quot;no-empty&quot;: 1,                            //空代码块
  &quot;no-use-before-define&quot;: [1, &quot;nofunc&quot;],    //使用前未定义
  &quot;complexity&quot;: [1, 10],                    //圈复杂度大于10 警告

  //常见错误
  &quot;comma-dangle&quot;: [2, &quot;never&quot;],             //定义数组或对象最后多余的逗号
  &quot;no-debugger&quot;: 2,                         //debugger 调试代码未删除
  &quot;no-constant-condition&quot;: 2,               //常量作为条件
  &quot;no-dupe-args&quot;: 2,                        //参数重复
  &quot;no-dupe-keys&quot;: 2,                        //对象属性重复
  &quot;no-duplicate-case&quot;: 2,                   //case重复
  &quot;no-empty-character-class&quot;: 2,            //正则无法匹配任何值
  &quot;no-invalid-regexp&quot;: 2,                   //无效的正则
  &quot;no-func-assign&quot;: 2,                      //函数被赋值
  &quot;valid-typeof&quot;: 2,                        //无效的类型判断
  &quot;no-unreachable&quot;: 2,                      //不可能执行到的代码
  &quot;no-unexpected-multiline&quot;: 2,             //行尾缺少分号可能导致一些意外情况
  &quot;no-sparse-arrays&quot;: 2,                    //数组中多出逗号
  &quot;no-shadow-restricted-names&quot;: 2,          //关键词与命名冲突
  &quot;no-undef&quot;: 2,                            //变量未定义
  &quot;no-unused-vars&quot;: 2,                      //变量定义后未使用
  &quot;no-cond-assign&quot;: 2,                      //条件语句中禁止赋值操作
  &quot;no-native-reassign&quot;: 2,                  //禁止覆盖原生对象

  //代码风格优化
  &quot;no-else-return&quot;: 1,                      //在else代码块中return，else是多余的
  &quot;no-multi-spaces&quot;: 1,                     //不允许多个空格
  &quot;key-spacing&quot;: [1, {&quot;beforeColon&quot;: false, &quot;afterColon&quot;: true}],//object直接量建议写法 : 后一个空格前面不留空格
  &quot;block-scoped-var&quot;: 2,                    //变量应在外部上下文中声明，不应在{}代码块中
  &quot;consistent-return&quot;: 2,                   //函数返回值可能是不同类型
  &quot;accessor-pairs&quot;: 2,                      //object getter/setter方法需要成对出现
  &quot;dot-location&quot;: [2, &quot;property&quot;],          //换行调用对象方法  点操作符应写在行首
  &quot;no-lone-blocks&quot;: 2,                      //多余的{}嵌套
  &quot;no-empty-label&quot;: 2,                      //无用的标记
  &quot;no-extend-native&quot;: 2,                    //禁止扩展原生对象
  &quot;no-floating-decimal&quot;: 2,                 //浮点型需要写全 禁止.1 或 2.写法
  &quot;no-loop-func&quot;: 2,                        //禁止在循环体中定义函数
  &quot;no-new-func&quot;: 2,                         //禁止new Function(...) 写法
  &quot;no-self-compare&quot;: 2,                     //不允与自己比较作为条件
  &quot;no-sequences&quot;: 2,                        //禁止可能导致结果不明确的逗号操作符
  &quot;no-throw-literal&quot;: 2,                    //禁止抛出一个直接量 应是Error对象
  &quot;no-return-assign&quot;: [2, &quot;always&quot;],        //不允return时有赋值操作
  &quot;no-redeclare&quot;: [2, {&quot;builtinGlobals&quot;: true}],//不允许重复声明
  &quot;no-unused-expressions&quot;: [2, {&quot;allowShortCircuit&quot;: true, &quot;allowTernary&quot;: true}],//不执行的表达式
  &quot;no-useless-call&quot;: 2,                     //无意义的函数call或apply
  &quot;no-useless-concat&quot;: 2,                   //无意义的string concat
  &quot;no-void&quot;: 2,                             //禁用void
  &quot;no-with&quot;: 2,                             //禁用with
  &quot;space-infix-ops&quot;: 2,                     //操作符前后空格
  &quot;valid-jsdoc&quot;: [2, {&quot;requireParamDescription&quot;: true, &quot;requireReturnDescription&quot;: true}],//jsdoc
  &quot;no-warning-comments&quot;: [2, { &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;any other term&quot;], &quot;location&quot;: &quot;anywhere&quot; }],//标记未写注释
  &quot;curly&quot;: 1                                //if、else、while、for代码块用{}包围
}
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h6 id=&quot;7成功后界面预览&quot;&gt;7.成功后界面预览&lt;/h6&gt;
    &lt;p&gt;根据语法规则的配置，eslint会自动检测语法错误，并高亮显示，是不是很酷呢~
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4190280-e4da058dd1b91da6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot; /&gt;&lt;/p&gt;
    &lt;h1 id=&quot;gulp中如何集成eslint&quot;&gt;gulp中如何集成ESlint&lt;/h1&gt;
    &lt;p&gt;通过自动化构建工具gulpe来集成eslint也是非常方便的。&lt;/p&gt;
    &lt;h6 id=&quot;1安装gulp-eslint包模块&quot;&gt;1.安装gulp-eslint包模块&lt;/h6&gt;
    &lt;p&gt;通过npm 或者 cnpm( 淘宝）来全局安装gulp-eslint 包模块.&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;npm install gulp-eslint -g
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h6 id=&quot;2编写gulp配置文件&quot;&gt;2.编写gulp配置文件&lt;/h6&gt;
    &lt;p&gt;然后在自己的项目的gulp.js配置文件中编写eslint的任务即可。&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;var eslint = require('gulp-eslint');
gulp.task('eslint-task', function(){
    return gulp.src(['app/**/*.js']) //指定的校验路径
    .pipe(eslint({configFile:&quot;./.eslintrc&quot;})) //使用你的eslint校验文件
    .pipe(eslint.format())
 });
gulp.task('default', ['eslint-task']);
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;
    &lt;p&gt;使用eslint能够很大程度上避免程序员编码过程中出现的低级错误，提高自己的代码水平。一个项目中，代码的质量，健壮性尤为重要。eslint能够让前端工程工程化更进一步。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 08 May 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/05/08/ESLint%E8%AF%AD%E6%B3%95%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/08/ESLint%E8%AF%AD%E6%B3%95%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</guid>
        
        <category>ESLint</category>
        
        <category>代码检测</category>
        
        
      </item>
    
  </channel>
</rss>
